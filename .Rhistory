getwd()
setwd("/Users/carty/OneDrive/Documents/GitHub/StatsI_Fall2023")
getwd()
df <- readRDS("datasets/movies.rds")
View(df)
df_s <- df[df$genre=="Comedy" |
df$genre=="Drama" |
df$genre=="Documentary", ]
df_s$genre <- droplevels(df_s$genre)
View(df_s)
chisq.test(df_s$genre,
df_s$critics_rating)
sprintf("%.20f",1.097e-12)
chi_test <- chisq.test(df_s$genre, df_s$critics_rating)
ls(chi_test)
chi_test$observed # f_o (observed frequencies)
chi_test$expected # f_e (expected frequencies under the assumption of H0,
chi_test$residuals
chi_test$stdres
df <- read.csv("datasets/fictional_data.csv")
View(df)
plot(df$income,df$edu)
cor(df$income,df$edu)
text(1200, 7, sprintf("Correlation=%s", round(cor(df$income,df$edu),4)))
png(file="tutorials/04/scatter_plot.png")
plot(df$income,
df$edu,
xlab="Monthly net income (in Euro)",
ylab="University level education (in years)",
main="The Relationship between education and income")
text(1200, 8, sprintf("Correlation=%s", round(cor(df$income,df$edu),4)))
dev.off()
cor.test(df$income, df$edu)
sprintf("%.20f",7.52e-07)
summary(lm(df$income~df$edu))
model <- lm(income~edu, data=df)
View(model)
summary(model)
250.64/33.06
confint(model, level=0.95)
confint(model, level=0.99)
# Plot
plot(x=df$edu, y=df$income) # Scatter plot
abline(model) # Add regression line
plot(x=df$edu, y=df$income) # Scatter plot
abline(model) # Add regression line
plot(x=df$edu, y=df$income) # Scatter plot
abline(v=4)  # Either specify single value (v for vertical)
abline(976.16, 250.64) # Or intercept and slope
abline(model) # Use intercept and slope in model object
abline(model, col="red") # Change color
summary(model)
summary(model)
head(df)
976.16 +  250.64 * 1 # predicted outcome
model$fitted.values
1520 - (976.16 +  250.64 * 1) # error
model$residuals
predict(model, newdata=data.frame(edu = seq(min(df$edu), max(df$edu), by=1)))
unique(df$edu) # Unique values of x
seq(min(df$edu), max(df$edu), by=1) # Specify a sequences for which
predict(model, newdata=data.frame(edu = seq(min(df$edu), max(df$edu), by=1)))
predict(model, newdata=data.frame(edu = c(0,1,2,3,4,5,6,7,8)), se.fit=TRUE)
predict(model, newdata=data.frame(edu = c(0,1,2,3,4,5,6,7,8)), interval="confidence", level=0.95)
predict(model, newdata=data.frame(edu = c(0,1,2,3,4,5,6,7,8)), interval="prediction", level=0.95)
predict(model, newdata=data.frame(edu = mean(df$edu))) # Mean education
mean(df$edu)
unique(df$edu) # Unique values of x
predict(model, newdata=data.frame(edu = 9)) # **But don't extrapolate**
# Plot predictions
plot(x=df$edu, y=df$income) # Scatter plot
points(df$edu, model$fitted.values, # Add another scatter plot on top
col="green")
png(file="tutorials/04/reg_plot.png")
plot(df$edu,
df$incom,
xlab="Monthly net income (in Euro)",
ylab="University level education (in years)",
main="The Relationship between education and income")
abline(model) # Add regression line
# Add confidence intervals
lines(seq(min(df$edu), max(df$edu),by=1), ci[,2], col="gray")
ci <- predict(model, newdata=data.frame(edu = seq(min(df$edu), max(df$edu),by=1)), interval="confidence", level=0.95)
plot(df$edu, df$income) # Scatter plot
abline(model) # Add regression line
# Add lower bound
lines(seq(min(df$edu), max(df$edu),by=1), ci[,2], col="gray")
# Add upper bound
lines(seq(min(df$edu), max(df$edu),by=1), ci[,3], col="gray")
# Step by step
ci <- predict(model, newdata=data.frame(edu = seq(min(df$edu), max(df$edu),by=1)), interval="confidence", level=0.95)
ci # Save confidence intervals in object
# Dataframe subsetting: df[rows, columns]
ci[,2] # second column, lower bound, lwr
ci[,3] # third column, upper bound, upr
# Improve visualization and save
png(file="tutorials/04/reg_plot.png")
plot(df$edu,
df$incom,
xlab="Monthly net income (in Euro)",
ylab="University level education (in years)",
main="The Relationship between education and income")
abline(model) # Add regression line
# Add confidence intervals
lines(seq(min(df$edu), max(df$edu),by=1), ci[,2], col="gray")
lines(seq(min(df$edu), max(df$edu),by=1), ci[,3], col="gray")
# Add legend
legend(0, 3000, # x and y position of legend
legend=c("Predictions", "95% Confidence intervals"),
col=c("black","gray"),
pch=1)
dev.off()
