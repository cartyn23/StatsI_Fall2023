help(mpg)
head(mpg)
help(mpg)
mtcars
?mtcars
help(mpg)
head(mpg)
mpg
Nile
mpg
ggplot(mtcars, aes(wt, mpg, size = hp)) +
geom_text(aes(size = hp, label = cyl, color = am)) +
geom_smooth(aes(linetype = cyl), color = "grey", size = 0.5, se = FALSE, show.legend = FALSE) +
guides(size = "none") +
theme_classic() +
theme(legend.title = element_blank(), legend.justification = c(1, 1), legend.position = c(1, 1)) +
scale_color_manual(labels = c("manual", "automatic"), values = c("blue", "red")) +
labs(title = "Plot of Fuel Efficiency by Weight for 32 Cars", subtitle = "Number of cylinders; size = horsepower") +
xlab("weight (1000 lbs)")
mtcars$am <- as.factor(mtcars$am)
mtcars$cyl <- as.factor(mtcars$cyl)
ggplot(mtcars, aes(wt, mpg, size = hp)) +
geom_text(aes(size = hp, label = cyl, color = am)) +
geom_smooth(aes(linetype = cyl), color = "grey", size = 0.5, se = FALSE, show.legend = FALSE) +
guides(size = "none") +
theme_classic() +
theme(legend.title = element_blank(), legend.justification = c(1, 1), legend.position = c(1, 1)) +
scale_color_manual(labels = c("manual", "automatic"), values = c("blue", "red")) +
labs(title = "Plot of Fuel Efficiency by Weight for 32 Cars", subtitle = "Number of cylinders; size = horsepower") +
xlab("weight (1000 lbs)")
summary(mtcars)
getwd()
str(mtcars)
head(mtcars)
ls.str(mtcars)
ggplot(mtcars, aes(wt, mpg, size = hp)) +
geom_text(aes(size = hp, label = cyl, color = am)) +
geom_smooth(aes(linetype = cyl), color = "grey", size = 0.5, se = FALSE, show.legend = FALSE) +
guides(size = "none") +
theme_classic() +
theme(legend.title = element_blank(), legend.justification = c(1, 1), legend.position = c(1, 1)) +
scale_color_manual(labels = c("manual", "automatic"), values = c("blue", "red")) +
labs(title = "Plot of Fuel Efficiency by Weight for 32 Cars", subtitle = "Number of cylinders; size = horsepower") +
xlab("weight (1000 lbs)")
ls.str(mtcars)
summary(mtcars)
mtcars$am <- as.factor(mtcars$am)
mtcars$am <- as.factor(mtcars$am)
ggplot(mtcars, aes(wt, mpg, size = hp)) +
geom_text(aes(size = hp, label = cyl, color = am)) +
geom_smooth(aes(linetype = cyl), color = "grey", size = 0.5, se = FALSE, show.legend = FALSE) +
guides(size = "none") +
theme_classic() +
theme(legend.title = element_blank(), legend.justification = c(1, 1), legend.position = c(1, 1)) +
scale_color_manual(labels = c("manual", "automatic"), values = c("blue", "red")) +
labs(title = "Plot of Fuel Efficiency by Weight for 32 Cars", subtitle = "Number of cylinders; size = horsepower") +
xlab("weight (1000 lbs)")
mtcars$am <- as.factor(mtcars$am)
mtcars$cyl <- as.factor(mtcars$cyl)
ggplot(mtcars, aes(wt, mpg, size = hp)) +
geom_text(aes(size = hp, label = cyl, color = am)) +
geom_smooth(aes(linetype = cyl), color = "grey", size = 0.5, se = FALSE, show.legend = FALSE) +
guides(size = "none") +
theme_classic() +
theme(legend.title = element_blank(), legend.justification = c(1, 1), legend.position = c(1, 1)) +
scale_color_manual(labels = c("manual", "automatic"), values = c("blue", "red")) +
labs(title = "Plot of Fuel Efficiency by Weight for 32 Cars", subtitle = "Number of cylinders; size = horsepower") +
xlab("weight (1000 lbs)")
library("tidyverse")
ggplot(mtcars, aes(wt, mpg, size = hp)) +
geom_text(aes(size = hp, label = cyl, color = am)) +
geom_smooth(aes(linetype = cyl), color = "grey", size = 0.5, se = FALSE, show.legend = FALSE) +
guides(size = "none") +
theme_classic() +
theme(legend.title = element_blank(), legend.justification = c(1, 1), legend.position = c(1, 1)) +
scale_color_manual(labels = c("manual", "automatic"), values = c("blue", "red")) +
labs(title = "Plot of Fuel Efficiency by Weight for 32 Cars", subtitle = "Number of cylinders; size = horsepower") +
xlab("weight (1000 lbs)")
help(mpg)
head(mpg)
summary(mpg)
str(mpg)
ggplot(mtcars, aes(wt, mpg, size = hp)) +
geom_text(aes(size = hp, label = cyl, color = am)) +
geom_smooth(aes(linetype = cyl), color = "grey", size = 0.5, se = FALSE, show.legend = FALSE) +
guides(size = "none") +
theme_classic() +
theme(legend.title = element_blank(), legend.justification = c(1, 1), legend.position = c(1, 1)) +
scale_color_manual(labels = c("manual", "automatic"), values = c("blue", "red")) +
labs(title = "Plot of Fuel Efficiency by Weight for 32 Cars", subtitle = "Number of cylinders; size = horsepower") +
xlab("weight (1000 lbs)")
ggplot(mtcars, aes(wt, mpg, size = hp)) +
geom_text(aes(size = hp, label = cyl, color = am)) +
geom_smooth(aes(linetype = cyl), color = "grey", size = 0.5, se = FALSE, show.legend = FALSE) +
guides(size = "none") +
theme_classic() +
theme(legend.title = element_blank(), legend.justification = c(1, 1), legend.position = c(1, 1)) +
scale_color_manual(labels = c("manual", "automatic"), values = c("blue", "red")) +
labs(title = "Plot of Fuel Efficiency by Weight for 32 Cars", subtitle = "Number of cylinders; size = horsepower") +
xlab("weight (1000 lbs)")
ggplot(mpg, aes(wt, mpg, size = hp)) +
geom_text(aes(size = hp, label = cyl, color = am)) +
geom_smooth(aes(linetype = cyl), color = "grey", size = 0.5, se = FALSE, show.legend = FALSE) +
guides(size = "none") +
theme_classic() +
theme(legend.title = element_blank(), legend.justification = c(1, 1), legend.position = c(1, 1)) +
scale_color_manual(labels = c("manual", "automatic"), values = c("blue", "red")) +
labs(title = "Plot of Fuel Efficiency by Weight for 32 Cars", subtitle = "Number of cylinders; size = horsepower") +
xlab("weight (1000 lbs)")
summary(mpg)
help(mpg)
ggplot(mpg, aes(cyl, trans, drv))
?aes
ggplot(mpg, aes(cyl, cty))
ggplot(mpg, aes(cyl, model))
?geom_smooth
ggplot(mpg, aes(cyl, model))+
geom_smooth(aes(linetype = cyl), color = "grey", size = 0.5, se = FALSE, show.legend = FALSE)
ggplot(mpg, aes(cyl, model))+
geom_smooth(aes(linetype = cyl), color = "grey", size = 0.5, se = FALSE, show.legend = FALSE)
ggplot(mpg, aes(cyl, model))
ggplot(mpg, aes(year, model))
ggplot(mpg, aes(year, model))
geom_point
ggplot(mpg, aes(year, model))
geom_point()
ggplot(mpg, aes(year, model))+
geom_point(cty)
ggplot(mpg, aes(year, model))+
geom_point(cyl)
ggplot(mpg, aes(year, model))+
geom_point(cyl)
ggplot(mpg, aes(displ, hwy)
ggplot(mpg, aes(displ, hwy))
?aes
ggplot(mpg, aes(displ, hwy))
ggplot(mpg, aes(displ, hwy))
ggplot(mpg, aes(displ, hwy, color = model))
ggplot(mpg, aes(displ, hwy, color = model))
ggplot(mpg, aes(displ, hwy, color = model))
ggplot(mpg, aes(displ, hwy, color = model))
ggplot(mpg, aes(displ, hwy, color = class))
ggplot(mpg, aes(x = displ, y = hwy, color = class))
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = class))
help(mpg)
x <- vector("double", 10)
for(i in 1:10){
x[i] <- i
}
x <- seq(1:10)
seq(1:10)
x <- seq(1:10, by = 5)
x <- seq(from = 1, to = 10, by = 5)
x <- seq(from = 1, to = 10, by = 2)
?seq
y <- x + 11
y <- c(x, 11)
x <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
y <- x + 11
y <- c(x, 11)
xMean <- mean(x)
xMean
xLength <- length(x)
xLength
xmean == xlenght
xMean == xlenght
xMean == xLength
xLength <- length(x)
xLength
xDev <- x - xMean
xDevSq <- xDev^2
xDevSq
xSumDevSq <- sum(xDevSq)
xSumDevSq
xVar <- xSumDevSq/xLength
xVar
xSD <- sqrt(xVar)
xSD
sd(x)
xVar_s <- xSumDevSq/(xLength - 1)
XSD_s <- sqrt(xVar_s)
sd(x)
search()
library("tidyverse")
search()
help(tidyverse)
example(persp)
?dplyr
vignette("dplyr")
browseVignettes(package = "dplyr")
?mtcars
summary(mtcars)
str(mtcars)
mtcars
view(mtcars)
summary(mtcars$mpg)
view(mtcars$mpg)
mtcars$cyl <- as.factor(mtcars$cyl)
ggplot(mtcars, aes(wt, mpg, size = hp)) +
geom_text(aes(size = hp, label = cyl, color = am)) +
geom_smooth(aes(linetype = cyl), color = "grey", size = 0.5, se = FALSE, show.legend = FALSE) +
guides(size = "none") +
theme_classic() +
theme(legend.title = element_blank(), legend.justification = c(1, 1), legend.position = c(1, 1)) +
scale_color_manual(labels = c("manual", "automatic"), values = c("blue", "red")) +
labs(title = "Plot of Fuel Efficiency by Weight for 32 Cars", subtitle = "Number of cylinders; size = horsepower") +
xlab("weight (1000 lbs)")
ggplot(mtcars, aes(wt, mpg, size = hp)) +
geom_text(aes(size = hp, label = cyl, color = am)) +
geom_smooth(aes(linetype = cyl), color = "grey", size = 0.5, se = FALSE, show.legend = FALSE) +
guides(size = "none") +
theme_classic() +
theme(legend.title = element_blank(), legend.justification = c(1, 1), legend.position = c(1, 1)) +
scale_color_manual(labels = c("manual", "automatic"), values = c("blue", "red")) +
labs(title = "Plot of Fuel Efficiency by Weight for 32 Cars", subtitle = "Number of cylinders; size = horsepower") +
xlab("weight (1000 lbs)")
mtcars$am <- as.factor(mtcars$am)
mtcars$cyl <- as.factor(mtcars$cyl)
ggplot(mtcars, aes(wt, mpg, size = hp)) +
geom_text(aes(size = hp, label = cyl, color = am)) +
geom_smooth(aes(linetype = cyl), color = "grey", size = 0.5, se = FALSE, show.legend = FALSE) +
guides(size = "none") +
theme_classic() +
theme(legend.title = element_blank(), legend.justification = c(1, 1), legend.position = c(1, 1)) +
scale_color_manual(labels = c("manual", "automatic"), values = c("blue", "red")) +
labs(title = "Plot of Fuel Efficiency by Weight for 32 Cars", subtitle = "Number of cylinders; size = horsepower") +
xlab("weight (1000 lbs)")
getwd()
# (1) find sum of y
sum(y)
# (1) find sum of y
sum(y)
#create vector y
y <- c(0,4,4,5,7,10)
# (1) find sum of y
sum(y)
sum(y)/ length (y)
mean(y)
for(i in 1:length(y)){demeanedSum[i] <- y[i] - mean(y)}
demeanedSum <- NULL
for(i in 1:length(y)){demeanedSum[i] <- y[i] - mean(y)}
demeanedSumSimple <- y - mean(y)
sum(demeanedSumSimple)
squarredError <-demeanedSum^2
sum(squarredError)
4+4
4+4
4+4
hist(rnorm(100000, 100, 5), breaks=50, xlab="", main="Normal Distribution")
hist(rbeta(100000, 2, 99), breaks=50, xlab="", main="Right Skewed Distribution")
Runners <- rnorm(n=2500, mean=150, sd=10)
hist( Runners , freq=FALSE, main="Distribution of 1500 Runner Weights")
x <- sample(Runners, 50)
x
mean(x)
runner.sample <- as.data.frame(t(replicate(50, sample(Runners, 50))))
runner.sample$mean <- rowMeans(runner.sample, na.rm=TRUE)
hist(runner.sample$mean)
library(AER)
2 l <- list(2:4, "a", B = c(TRUE, FALSE, FALSE), list("x", 1L))
l <- list(2:4, "a", B = c(TRUE, FALSE, FALSE), list("x", 1L))
$B
l <- list(2:4, "a", B = c(TRUE, FALSE, FALSE), list("x", 1L))
$B
B
l <- list(2:4, "a", B = c(TRUE, FALSE, FALSE), list("x", 1L))
B
l <- list(2:4, "a", B = c(TRUE, FALSE, FALSE), list("x", 1L))
B
1[3]
B = c(TRUE, FALSE, FALSE)
l <- list(2:4, "a", B = c(TRUE, FALSE, FALSE), list("x", 1L))
$B
B
1[3]
l[3]
Get working directory
getwd()
t.test(df$income, mu = 3034)
# Applied Statistical Analysis I
# Tutorial 2: Hypothesis testing, experiments, difference in means
# Get working directory
getwd()
# Set working directory
setwd("/Users/hannahfrank/StatsI_Fall2023_prep")
# Tutorial 2: Hypothesis testing, experiments, difference in means
# Get working directory
getwd()
# Set working directory
setwd("/Users/carty/OneDrive/Documents")
getwd()
# Applied Statistical Analysis I
# Tutorial 2: Hypothesis testing, experiments, difference in means
# Get working directory
getwd()
# Set working directory
setwd("/Users/carty/OneDrive/Documents")
getwd()
# Agenda
# (a.) Descriptive analysis
# (b.) Confidence intervals
# (c.) Significance test for a mean
# (d.) Significance test for a difference in means
### Research Question -----------
# Is there a relationship between education and income?
# Load data
df <- read.csv("datasets/fictional_data.csv")
# Applied Statistical Analysis I
# Tutorial 2: Hypothesis testing, experiments, difference in means
# Get working directory
getwd()
# Set working directory
setwd("Users/carty/OneDrive/Documents/GitHub/StatsI_Fall2023/tutorials")
getwd()
setwd("Users/carty/OneDrive/Documents/GitHub/StatsI_Fall2023/tutorials")
setwd("Users/carty/OneDrive/Documents/GitHub/StatsI_Fall2023/tutorials")
# Load data
df <- read.csv("datasets/fictional_data.csv")
# Set working directory
setwd("Users/carty/OneDrive/Documents/GitHub/StatsI_Fall2023")
# Get working directory
getwd()
# Set working directory
setwd("/Users/carty/OneDrive/Documents/GitHub/StatsI_Fall2023")
getwd()
# Load data
df <- read.csv("datasets/fictional_data.csv")
# Load data
df <- read.csv("datasets/fictional_data.csv")
# Capital: Whether the person lives in capital or not
### (a.) Descriptive analysis ----------
# First step, look at data
View(df)
head(df)
str(df) # Structure of R object
?str
mean(df$income) # Central tendency, mean
var(df$income) # Variability, variance
sd(df$income) # Variability, standard deviation
sd(df$income)/sqrt(length(df$income)) # Variability, standard **error**
# Step by step
df$income # Access variable
length(df$income) # Number of observations
sqrt(length(df$income)) # Take square root
sqrt(19)
summary(df)
# Some quick visualizations, to look at distribution
hist(df$income,
#breaks = 20,
main="Monthly net income",
xlab="Euro")
plot(density(df$incom),
main="Monthly net income",
xlab="Euro")
# Which kind of inferences can we make with regards to the population,
# based on the sample data?
mean(df$income) # Sample mean is estimate for population mean
sd(df$income)/sqrt(length(df$income))
# Standard **error** (Sample standard deviation adjusted by sample size)
# is estimate for standard deviation of the sampling distribution
# What do we need?
mean(df$income) # Point estimate
sd(df$income)/sqrt(length(df$income)) # Standard error
# Lower bound, 95 confidence level
upper_95 = mean(df$income)+(1.96*sd(df$income)/sqrt(length(df$income)))
# Upper bound, 95 confidence level
lower_95 = mean(df$income)-(1.96*sd(df$income)/sqrt(length(df$income)))
# Print
lower_95
mean(df$income)
upper_95
# The **precise** solution, using normal distribution
# Lower bound, 95 confidence level
lower_95_n <- qnorm(0.025,
mean = mean(df$incom),
sd = (sd(df$income)/sqrt(length(df$income))))
# Upper bound, 95 confidence level
upper_95_n <- qnorm(0.975,
mean = mean(df$income),
sd = (sd(df$incom)/sqrt(length(df$income))))
?qnorm
qnorm(0.025) # value for first 2.5%
qnorm(0.975) # value last 2.5%
qnorm(0.025, mean=2, sd=0.4) # Change mean and standard error
# Print
lower_95_n
mean(df$income)
upper_95_n
# When to use normal distribution and when to use t distribution?
# The **precise** solution, using t distribution
t_score <- qt(0.995, df=length(df$income)-1)
lower_99_t <- mean(df$income)-(t_score)*(sd(df$income)/sqrt(length(df$income)))
upper_99_t <- mean(df$income)+(t_score)*(sd(df$income)/sqrt(length(df$income)))
# Step by step
?qt
qt(0.005, df=length(df$income)-1) # critical value for first 0.5%
qt(0.995, df=length(df$income)-1) # last 0.5%
qt(0.005, df=length(df$income)-1, lower.tail=FALSE) # last 0.5%
lower_99_t
mean(df$income)
upper_99_t
# Update Histogram
hist(df$income)
abline(v=mean(df$income),col="black")
abline(v=lower_95,col="black",lty="dashed")
abline(v=upper_95,col="black",lty="dashed")
# Is there a relationship between education and income?
# Scatter plot
plot(df$income,df$edu)
plot(df$income,df$edu,
col=df$cap+1) # Color over third variable (+1, because first color in R is white)
# Improve visualization and save
png(file="tutorials/02/scatter_plot.png")
plot(df$income,
df$edu,
col=df$cap+1,
xlab="Monthly net income (in Euro)",
ylab="University level education (in years)",
main="The Relationship between education and income")
# Add legend
legend(1000, 8, # x and y position of legend
legend=c("Non capital", "Capital"),
col=c("black","red"),
pch=1) # Marker type (1 is default)
dev.off()
# Boxplot
boxplot(df$income ~ df$cap,
main="Boxplot of Income by place of residence",
ylab="Euro",
xlab="Place of residence",
names=c("Non capital","Capital"))
# Improve visualization and save
png(file="tutorials/02/scatter_plot.png")
plot(df$income,
df$edu,
col=df$cap+1,
xlab="Monthly net income (in Euro)",
ylab="University level education (in years)",
main="The Relationship between education and income")
# Add legend
legend(1000, 8, # x and y position of legend
legend=c("Non capital", "Capital"),
col=c("black","red"),
pch=1) # Marker type (1 is default)
dev.off()
t.test(df$income, mu = 3034)
?t.test
t.test(df$income, mu = 3034, alternative = "less")
t.test(df$income, conf.level = 0.99, alternative = "two.sided")
mean(df$income)
lower_99_t
upper_99_t
mean(df[df$cap==0, ]$income)
mean(df[df$cap==1, ]$income)
df$cap
df$cap==0 # Only consider cases with cap==0
df[df$cap==0, ] # Subsetting rows accordingly
df[df$cap==0, ]$income # Access variable
mean(df[df$cap==0, ]$income) # Calculate mean
t.test(df$income ~ df$cap, alternative = "two.sided")
t.test(df$income ~ df$cap, alternative = "less")
